{"ast":null,"code":"var _jsxFileName = \"/home/mitu/reduxasync/striming/src/components/editStrems.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { connect } from \"react-redux\";\nimport { createStrems, fetchStrmes } from \"../actions\";\n\nclass EditStream extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      title: \"\",\n      discription: \"\"\n    };\n\n    this.fromSubmit = item => {\n      this.props.createStrems(item);\n    };\n  }\n\n  componentDidMount() {\n    let result = this.props.fetchStrmes(this.props.match.params.id); // console.log(result);\n\n    result.then(item => {\n      this.setState({\n        title: item.title,\n        discription: item.discription\n      });\n    });\n  }\n\n  renderInput({\n    input,\n    lable,\n    type,\n    placeholder,\n    meta: {\n      touched,\n      error,\n      warning\n    }\n  }) {\n    return React.createElement(React.Fragment, null, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, lable), React.createElement(\"input\", Object.assign({}, input, {\n      type: type,\n      placeholder: placeholder,\n      autoComplete: \"off\",\n      className: error && touched ? \"sdf me\" : \"sdf\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    })), touched && error && React.createElement(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, error), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"auth-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"auth-inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.fromSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Field, {\n      type: \"text\",\n      placeholder: \"enter title\",\n      name: \"title\",\n      component: this.renderInput,\n      lable: \"Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(Field, {\n      type: \"text\",\n      name: \"discription\",\n      placeholder: \"enter discription\",\n      component: this.renderInput,\n      lable: \"Discription\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nconst validate = values => {\n  const errors = {};\n\n  if (!values.title) {\n    errors.title = \"Required\";\n  } else if (values.title.length > 25) {\n    errors.title = \"Must be 15 characters or less\";\n  }\n\n  if (!values.discription) {\n    errors.discription = \"Required\";\n  } else if (values.discription.length > 25) {\n    errors.discription = \"Must be 15 characters or less\";\n  }\n\n  return errors;\n};\n\nconst formWrape = reduxForm({\n  form: \"createStreame\",\n  validate: validate\n})(EditStream);\nexport default connect(null, {\n  createStrems,\n  fetchStrmes\n})(formWrape);","map":{"version":3,"sources":["/home/mitu/reduxasync/striming/src/components/editStrems.js"],"names":["React","Field","reduxForm","connect","createStrems","fetchStrmes","EditStream","Component","state","title","discription","fromSubmit","item","props","componentDidMount","result","match","params","id","then","setState","renderInput","input","lable","type","placeholder","meta","touched","error","warning","color","render","handleSubmit","validate","values","errors","length","formWrape","form"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { connect } from \"react-redux\";\nimport { createStrems, fetchStrmes } from \"../actions\";\nclass EditStream extends React.Component {\n  state = {\n    title: \"\",\n    discription: \"\",\n  };\n  componentDidMount() {\n    let result = this.props.fetchStrmes(this.props.match.params.id);\n    // console.log(result);\n    result.then((item) => {\n      this.setState({\n        title: item.title,\n        discription: item.discription,\n      });\n    });\n  }\n  renderInput({\n    input,\n    lable,\n    type,\n    placeholder,\n    meta: { touched, error, warning },\n  }) {\n    return (\n      <>\n        <label>{lable}</label>\n        <input\n          {...input}\n          type={type}\n          placeholder={placeholder}\n          autoComplete=\"off\"\n          className={error && touched ? \"sdf me\" : \"sdf\"}\n        />\n        {touched && error && <span style={{ color: \"red\" }}>{error}</span>}\n        <br />\n      </>\n    );\n  }\n\n  fromSubmit = (item) => {\n    this.props.createStrems(item);\n  };\n\n  render() {\n    return (\n      <div className=\"auth-wrapper\">\n        <div className=\"auth-inner\">\n          <form onSubmit={this.props.handleSubmit(this.fromSubmit)}>\n            <Field\n              type=\"text\"\n              placeholder=\"enter title\"\n              name=\"title\"\n              component={this.renderInput}\n              lable=\"Title\"\n            />\n            <Field\n              type=\"text\"\n              name=\"discription\"\n              placeholder=\"enter discription\"\n              component={this.renderInput}\n              lable=\"Discription\"\n            />\n\n            <button type=\"submit\">Submit</button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\nconst validate = (values) => {\n  const errors = {};\n  if (!values.title) {\n    errors.title = \"Required\";\n  } else if (values.title.length > 25) {\n    errors.title = \"Must be 15 characters or less\";\n  }\n\n  if (!values.discription) {\n    errors.discription = \"Required\";\n  } else if (values.discription.length > 25) {\n    errors.discription = \"Must be 15 characters or less\";\n  }\n  return errors;\n};\n\nconst formWrape = reduxForm({\n  form: \"createStreame\",\n  validate: validate,\n})(EditStream);\n\nexport default connect(null, { createStrems, fetchStrmes })(formWrape);\n"]},"metadata":{},"sourceType":"module"}