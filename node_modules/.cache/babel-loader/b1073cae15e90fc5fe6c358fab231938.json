{"ast":null,"code":"import _objectWithoutProperties from \"/home/mitu/reduxasync/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\nimport SelectableContext from '@restart/ui/SelectableContext';\nimport { useUncontrolled } from 'uncontrollable';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport NavbarBrand from './NavbarBrand';\nimport NavbarCollapse from './NavbarCollapse';\nimport NavbarToggle from './NavbarToggle';\nimport NavbarOffcanvas from './NavbarOffcanvas';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport NavbarContext from './NavbarContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst NavbarText = createWithBsPrefix('navbar-text', {\n  Component: 'span'\n});\nconst defaultProps = {\n  expand: true,\n  variant: 'light',\n  collapseOnSelect: false\n};\nconst Navbar =\n/*#__PURE__*/\nReact.forwardRef((props, ref) => {\n  const _useUncontrolled = useUncontrolled(props, {\n    expanded: 'onToggle'\n  }),\n        initialBsPrefix = _useUncontrolled.bsPrefix,\n        expand = _useUncontrolled.expand,\n        variant = _useUncontrolled.variant,\n        bg = _useUncontrolled.bg,\n        fixed = _useUncontrolled.fixed,\n        sticky = _useUncontrolled.sticky,\n        className = _useUncontrolled.className,\n        _useUncontrolled$as = _useUncontrolled.as,\n        Component = _useUncontrolled$as === void 0 ? 'nav' : _useUncontrolled$as,\n        expanded = _useUncontrolled.expanded,\n        onToggle = _useUncontrolled.onToggle,\n        onSelect = _useUncontrolled.onSelect,\n        collapseOnSelect = _useUncontrolled.collapseOnSelect,\n        controlledProps = _objectWithoutProperties(_useUncontrolled, [\"bsPrefix\", \"expand\", \"variant\", \"bg\", \"fixed\", \"sticky\", \"className\", \"as\", \"expanded\", \"onToggle\", \"onSelect\", \"collapseOnSelect\"]);\n\n  const bsPrefix = useBootstrapPrefix(initialBsPrefix, 'navbar');\n  const handleCollapse = useCallback((...args) => {\n    onSelect == null ? void 0 : onSelect(...args);\n\n    if (collapseOnSelect && expanded) {\n      onToggle == null ? void 0 : onToggle(false);\n    }\n  }, [onSelect, collapseOnSelect, expanded, onToggle]); // will result in some false positives but that seems better\n  // than false negatives. strict `undefined` check allows explicit\n  // \"nulling\" of the role if the user really doesn't want one\n\n  if (controlledProps.role === undefined && Component !== 'nav') {\n    controlledProps.role = 'navigation';\n  }\n\n  let expandClass = `${bsPrefix}-expand`;\n  if (typeof expand === 'string') expandClass = `${expandClass}-${expand}`;\n  const navbarContext = useMemo(() => ({\n    onToggle: () => onToggle == null ? void 0 : onToggle(!expanded),\n    bsPrefix,\n    expanded: !!expanded\n  }), [bsPrefix, expanded, onToggle]);\n  return (\n    /*#__PURE__*/\n    _jsx(NavbarContext.Provider, {\n      value: navbarContext,\n      children:\n      /*#__PURE__*/\n      _jsx(SelectableContext.Provider, {\n        value: handleCollapse,\n        children:\n        /*#__PURE__*/\n        _jsx(Component, {\n          ref: ref,\n          ...controlledProps,\n          className: classNames(className, bsPrefix, expand && expandClass, variant && `${bsPrefix}-${variant}`, bg && `bg-${bg}`, sticky && `sticky-${sticky}`, fixed && `fixed-${fixed}`)\n        })\n      })\n    })\n  );\n});\nNavbar.defaultProps = defaultProps;\nNavbar.displayName = 'Navbar';\nexport default Object.assign(Navbar, {\n  Brand: NavbarBrand,\n  Collapse: NavbarCollapse,\n  Offcanvas: NavbarOffcanvas,\n  Text: NavbarText,\n  Toggle: NavbarToggle\n});","map":{"version":3,"sources":["/home/mitu/reduxasync/node_modules/react-bootstrap/esm/Navbar.js"],"names":["classNames","React","useCallback","useMemo","SelectableContext","useUncontrolled","createWithBsPrefix","NavbarBrand","NavbarCollapse","NavbarToggle","NavbarOffcanvas","useBootstrapPrefix","NavbarContext","jsx","_jsx","NavbarText","Component","defaultProps","expand","variant","collapseOnSelect","Navbar","forwardRef","props","ref","expanded","initialBsPrefix","bsPrefix","bg","fixed","sticky","className","as","onToggle","onSelect","controlledProps","handleCollapse","args","role","undefined","expandClass","navbarContext","Provider","value","children","displayName","Object","assign","Brand","Collapse","Offcanvas","Text","Toggle"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\nimport SelectableContext from '@restart/ui/SelectableContext';\nimport { useUncontrolled } from 'uncontrollable';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport NavbarBrand from './NavbarBrand';\nimport NavbarCollapse from './NavbarCollapse';\nimport NavbarToggle from './NavbarToggle';\nimport NavbarOffcanvas from './NavbarOffcanvas';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport NavbarContext from './NavbarContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst NavbarText = createWithBsPrefix('navbar-text', {\n  Component: 'span'\n});\nconst defaultProps = {\n  expand: true,\n  variant: 'light',\n  collapseOnSelect: false\n};\nconst Navbar = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    bsPrefix: initialBsPrefix,\n    expand,\n    variant,\n    bg,\n    fixed,\n    sticky,\n    className,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'nav',\n    expanded,\n    onToggle,\n    onSelect,\n    collapseOnSelect,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    expanded: 'onToggle'\n  });\n  const bsPrefix = useBootstrapPrefix(initialBsPrefix, 'navbar');\n  const handleCollapse = useCallback((...args) => {\n    onSelect == null ? void 0 : onSelect(...args);\n\n    if (collapseOnSelect && expanded) {\n      onToggle == null ? void 0 : onToggle(false);\n    }\n  }, [onSelect, collapseOnSelect, expanded, onToggle]); // will result in some false positives but that seems better\n  // than false negatives. strict `undefined` check allows explicit\n  // \"nulling\" of the role if the user really doesn't want one\n\n  if (controlledProps.role === undefined && Component !== 'nav') {\n    controlledProps.role = 'navigation';\n  }\n\n  let expandClass = `${bsPrefix}-expand`;\n  if (typeof expand === 'string') expandClass = `${expandClass}-${expand}`;\n  const navbarContext = useMemo(() => ({\n    onToggle: () => onToggle == null ? void 0 : onToggle(!expanded),\n    bsPrefix,\n    expanded: !!expanded\n  }), [bsPrefix, expanded, onToggle]);\n  return /*#__PURE__*/_jsx(NavbarContext.Provider, {\n    value: navbarContext,\n    children: /*#__PURE__*/_jsx(SelectableContext.Provider, {\n      value: handleCollapse,\n      children: /*#__PURE__*/_jsx(Component, {\n        ref: ref,\n        ...controlledProps,\n        className: classNames(className, bsPrefix, expand && expandClass, variant && `${bsPrefix}-${variant}`, bg && `bg-${bg}`, sticky && `sticky-${sticky}`, fixed && `fixed-${fixed}`)\n      })\n    })\n  });\n});\nNavbar.defaultProps = defaultProps;\nNavbar.displayName = 'Navbar';\nexport default Object.assign(Navbar, {\n  Brand: NavbarBrand,\n  Collapse: NavbarCollapse,\n  Offcanvas: NavbarOffcanvas,\n  Text: NavbarText,\n  Toggle: NavbarToggle\n});"]},"metadata":{},"sourceType":"module"}