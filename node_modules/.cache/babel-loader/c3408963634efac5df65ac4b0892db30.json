{"ast":null,"code":"import _objectWithoutProperties from \"/home/mitu/reduxasync/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/home/mitu/reduxasync/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport NoopTransition from '@restart/ui/NoopTransition';\nimport SelectableContext from '@restart/ui/SelectableContext';\nimport TabContext from '@restart/ui/TabContext';\nimport { useTabPanel } from '@restart/ui/TabPanel';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport getTabTransitionComponent from './getTabTransitionComponent';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TabPane =\n/*#__PURE__*/\nReact.forwardRef(({\n  bsPrefix,\n  transition,\n  ...props\n}, ref) => {\n  const _useTabPanel = useTabPanel({ ...props,\n    transition: getTabTransitionComponent(transition)\n  }),\n        _useTabPanel2 = _slicedToArray(_useTabPanel, 2),\n        _useTabPanel2$ = _useTabPanel2[0],\n        className = _useTabPanel2$.className,\n        _useTabPanel2$$as = _useTabPanel2$.as,\n        Component = _useTabPanel2$$as === void 0 ? 'div' : _useTabPanel2$$as,\n        rest = _objectWithoutProperties(_useTabPanel2$, [\"className\", \"as\"]),\n        _useTabPanel2$2 = _useTabPanel2[1],\n        isActive = _useTabPanel2$2.isActive,\n        onEnter = _useTabPanel2$2.onEnter,\n        onEntering = _useTabPanel2$2.onEntering,\n        onEntered = _useTabPanel2$2.onEntered,\n        onExit = _useTabPanel2$2.onExit,\n        onExiting = _useTabPanel2$2.onExiting,\n        onExited = _useTabPanel2$2.onExited,\n        mountOnEnter = _useTabPanel2$2.mountOnEnter,\n        unmountOnExit = _useTabPanel2$2.unmountOnExit,\n        _useTabPanel2$2$trans = _useTabPanel2$2.transition,\n        Transition = _useTabPanel2$2$trans === void 0 ? NoopTransition : _useTabPanel2$2$trans;\n\n  const prefix = useBootstrapPrefix(bsPrefix, 'tab-pane'); // We provide an empty the TabContext so `<Nav>`s in `<TabPanel>`s don't\n  // conflict with the top level one.\n\n  return (\n    /*#__PURE__*/\n    _jsx(TabContext.Provider, {\n      value: null,\n      children:\n      /*#__PURE__*/\n      _jsx(SelectableContext.Provider, {\n        value: null,\n        children:\n        /*#__PURE__*/\n        _jsx(Transition, {\n          in: isActive,\n          onEnter: onEnter,\n          onEntering: onEntering,\n          onEntered: onEntered,\n          onExit: onExit,\n          onExiting: onExiting,\n          onExited: onExited,\n          mountOnEnter: mountOnEnter,\n          unmountOnExit: unmountOnExit,\n          children:\n          /*#__PURE__*/\n          _jsx(Component, { ...rest,\n            ref: ref,\n            className: classNames(className, prefix, isActive && 'active')\n          })\n        })\n      })\n    })\n  );\n});\nTabPane.displayName = 'TabPane';\nexport default TabPane;","map":{"version":3,"sources":["/home/mitu/reduxasync/node_modules/react-bootstrap/esm/TabPane.js"],"names":["classNames","React","NoopTransition","SelectableContext","TabContext","useTabPanel","useBootstrapPrefix","getTabTransitionComponent","jsx","_jsx","TabPane","forwardRef","bsPrefix","transition","props","ref","className","as","Component","rest","isActive","onEnter","onEntering","onEntered","onExit","onExiting","onExited","mountOnEnter","unmountOnExit","Transition","prefix","Provider","value","children","in","displayName"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,OAAO;AAAG;AAAaT,KAAK,CAACU,UAAN,CAAiB,CAAC;AAC7CC,EAAAA,QAD6C;AAE7CC,EAAAA,UAF6C;AAG7C,KAAGC;AAH0C,CAAD,EAI3CC,GAJ2C,KAInC;AAAA,uBAiBJV,WAAW,CAAC,EAAE,GAAGS,KAAL;AACfD,IAAAA,UAAU,EAAEN,yBAAyB,CAACM,UAAD;AADtB,GAAD,CAjBP;AAAA;AAAA;AAAA,QAEPG,SAFO,kBAEPA,SAFO;AAAA,2CAIPC,EAJO;AAAA,QAIHC,SAJG,kCAIS,KAJT;AAAA,QAKJC,IALI;AAAA;AAAA,QAOPC,QAPO,mBAOPA,QAPO;AAAA,QAQPC,OARO,mBAQPA,OARO;AAAA,QASPC,UATO,mBASPA,UATO;AAAA,QAUPC,SAVO,mBAUPA,SAVO;AAAA,QAWPC,MAXO,mBAWPA,MAXO;AAAA,QAYPC,SAZO,mBAYPA,SAZO;AAAA,QAaPC,QAbO,mBAaPA,QAbO;AAAA,QAcPC,YAdO,mBAcPA,YAdO;AAAA,QAePC,aAfO,mBAePA,aAfO;AAAA,gDAgBPf,UAhBO;AAAA,QAgBKgB,UAhBL,sCAgBkB3B,cAhBlB;;AAoBT,QAAM4B,MAAM,GAAGxB,kBAAkB,CAACM,QAAD,EAAW,UAAX,CAAjC,CApBS,CAoBgD;AACzD;;AAEA;AAAO;AAAaH,IAAAA,IAAI,CAACL,UAAU,CAAC2B,QAAZ,EAAsB;AAC5CC,MAAAA,KAAK,EAAE,IADqC;AAE5CC,MAAAA,QAAQ;AAAE;AAAaxB,MAAAA,IAAI,CAACN,iBAAiB,CAAC4B,QAAnB,EAA6B;AACtDC,QAAAA,KAAK,EAAE,IAD+C;AAEtDC,QAAAA,QAAQ;AAAE;AAAaxB,QAAAA,IAAI,CAACoB,UAAD,EAAa;AACtCK,UAAAA,EAAE,EAAEd,QADkC;AAEtCC,UAAAA,OAAO,EAAEA,OAF6B;AAGtCC,UAAAA,UAAU,EAAEA,UAH0B;AAItCC,UAAAA,SAAS,EAAEA,SAJ2B;AAKtCC,UAAAA,MAAM,EAAEA,MAL8B;AAMtCC,UAAAA,SAAS,EAAEA,SAN2B;AAOtCC,UAAAA,QAAQ,EAAEA,QAP4B;AAQtCC,UAAAA,YAAY,EAAEA,YARwB;AAStCC,UAAAA,aAAa,EAAEA,aATuB;AAUtCK,UAAAA,QAAQ;AAAE;AAAaxB,UAAAA,IAAI,CAACS,SAAD,EAAY,EAAE,GAAGC,IAAL;AACrCJ,YAAAA,GAAG,EAAEA,GADgC;AAErCC,YAAAA,SAAS,EAAEhB,UAAU,CAACgB,SAAD,EAAYc,MAAZ,EAAoBV,QAAQ,IAAI,QAAhC;AAFgB,WAAZ;AAVW,SAAb;AAF2B,OAA7B;AAFiB,KAAtB;AAAxB;AAqBD,CAhD4B,CAA7B;AAiDAV,OAAO,CAACyB,WAAR,GAAsB,SAAtB;AACA,eAAezB,OAAf","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport NoopTransition from '@restart/ui/NoopTransition';\nimport SelectableContext from '@restart/ui/SelectableContext';\nimport TabContext from '@restart/ui/TabContext';\nimport { useTabPanel } from '@restart/ui/TabPanel';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport getTabTransitionComponent from './getTabTransitionComponent';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TabPane = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  transition,\n  ...props\n}, ref) => {\n  const [{\n    className,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    ...rest\n  }, {\n    isActive,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExit,\n    onExiting,\n    onExited,\n    mountOnEnter,\n    unmountOnExit,\n    transition: Transition = NoopTransition\n  }] = useTabPanel({ ...props,\n    transition: getTabTransitionComponent(transition)\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'tab-pane'); // We provide an empty the TabContext so `<Nav>`s in `<TabPanel>`s don't\n  // conflict with the top level one.\n\n  return /*#__PURE__*/_jsx(TabContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(SelectableContext.Provider, {\n      value: null,\n      children: /*#__PURE__*/_jsx(Transition, {\n        in: isActive,\n        onEnter: onEnter,\n        onEntering: onEntering,\n        onEntered: onEntered,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: onExited,\n        mountOnEnter: mountOnEnter,\n        unmountOnExit: unmountOnExit,\n        children: /*#__PURE__*/_jsx(Component, { ...rest,\n          ref: ref,\n          className: classNames(className, prefix, isActive && 'active')\n        })\n      })\n    })\n  });\n});\nTabPane.displayName = 'TabPane';\nexport default TabPane;"]},"metadata":{},"sourceType":"module"}