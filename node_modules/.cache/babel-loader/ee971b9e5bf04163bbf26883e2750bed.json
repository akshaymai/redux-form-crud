{"ast":null,"code":"import _objectWithoutProperties from \"/home/mitu/reduxasync/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  type: 'radio',\n  vertical: false\n};\nconst ToggleButtonGroup =\n/*#__PURE__*/\nReact.forwardRef((props, ref) => {\n  const _useUncontrolled = useUncontrolled(props, {\n    value: 'onChange'\n  }),\n        children = _useUncontrolled.children,\n        type = _useUncontrolled.type,\n        name = _useUncontrolled.name,\n        value = _useUncontrolled.value,\n        onChange = _useUncontrolled.onChange,\n        controlledProps = _objectWithoutProperties(_useUncontrolled, [\"children\", \"type\", \"name\", \"value\", \"onChange\"]);\n\n  const getValues = () => value == null ? [] : [].concat(value);\n\n  const handleToggle = (inputVal, event) => {\n    if (!onChange) {\n      return;\n    }\n\n    const values = getValues();\n    const isActive = values.indexOf(inputVal) !== -1;\n\n    if (type === 'radio') {\n      if (!isActive && onChange) onChange(inputVal, event);\n      return;\n    }\n\n    if (isActive) {\n      onChange(values.filter(n => n !== inputVal), event);\n    } else {\n      onChange([...values, inputVal], event);\n    }\n  };\n\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return (\n    /*#__PURE__*/\n    _jsx(ButtonGroup, { ...controlledProps,\n      ref: ref,\n      children: map(children, child => {\n        const values = getValues();\n        const _child$props = child.props,\n              childVal = _child$props.value,\n              childOnChange = _child$props.onChange;\n\n        const handler = e => handleToggle(childVal, e);\n\n        return (\n          /*#__PURE__*/\n          React.cloneElement(child, {\n            type,\n            name: child.name || name,\n            checked: values.indexOf(childVal) !== -1,\n            onChange: chainFunction(childOnChange, handler)\n          })\n        );\n      })\n    })\n  );\n});\nToggleButtonGroup.defaultProps = defaultProps;\nexport default Object.assign(ToggleButtonGroup, {\n  Button: ToggleButton\n});","map":{"version":3,"sources":["/home/mitu/reduxasync/node_modules/react-bootstrap/esm/ToggleButtonGroup.js"],"names":["React","invariant","useUncontrolled","chainFunction","map","ButtonGroup","ToggleButton","jsx","_jsx","defaultProps","type","vertical","ToggleButtonGroup","forwardRef","props","ref","value","children","name","onChange","controlledProps","getValues","concat","handleToggle","inputVal","event","values","isActive","indexOf","filter","n","process","env","NODE_ENV","child","childVal","childOnChange","handler","e","cloneElement","checked","Object","assign","Button"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,SAASC,GAAT,QAAoB,mBAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,OADa;AAEnBC,EAAAA,QAAQ,EAAE;AAFS,CAArB;AAIA,MAAMC,iBAAiB;AAAG;AAAaZ,KAAK,CAACa,UAAN,CAAiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAAA,2BAQlEb,eAAe,CAACY,KAAD,EAAQ;AACzBE,IAAAA,KAAK,EAAE;AADkB,GAAR,CARmD;AAAA,QAEpEC,QAFoE,oBAEpEA,QAFoE;AAAA,QAGpEP,IAHoE,oBAGpEA,IAHoE;AAAA,QAIpEQ,IAJoE,oBAIpEA,IAJoE;AAAA,QAKpEF,KALoE,oBAKpEA,KALoE;AAAA,QAMpEG,QANoE,oBAMpEA,QANoE;AAAA,QAOjEC,eAPiE;;AAYtE,QAAMC,SAAS,GAAG,MAAML,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqB,GAAGM,MAAH,CAAUN,KAAV,CAA7C;;AAEA,QAAMO,YAAY,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACxC,QAAI,CAACN,QAAL,EAAe;AACb;AACD;;AAED,UAAMO,MAAM,GAAGL,SAAS,EAAxB;AACA,UAAMM,QAAQ,GAAGD,MAAM,CAACE,OAAP,CAAeJ,QAAf,MAA6B,CAAC,CAA/C;;AAEA,QAAId,IAAI,KAAK,OAAb,EAAsB;AACpB,UAAI,CAACiB,QAAD,IAAaR,QAAjB,EAA2BA,QAAQ,CAACK,QAAD,EAAWC,KAAX,CAAR;AAC3B;AACD;;AAED,QAAIE,QAAJ,EAAc;AACZR,MAAAA,QAAQ,CAACO,MAAM,CAACG,MAAP,CAAcC,CAAC,IAAIA,CAAC,KAAKN,QAAzB,CAAD,EAAqCC,KAArC,CAAR;AACD,KAFD,MAEO;AACLN,MAAAA,QAAQ,CAAC,CAAC,GAAGO,MAAJ,EAAYF,QAAZ,CAAD,EAAwBC,KAAxB,CAAR;AACD;AACF,GAlBD;;AAoBA,IAAEf,IAAI,KAAK,OAAT,IAAoB,CAAC,CAACQ,IAAxB,IAAgCa,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChC,SAAS,CAAC,KAAD,EAAQ,sEAAsE,mBAA9E,CAAjD,GAAsJA,SAAS,CAAC,KAAD,CAA/L,GAAyM,KAAK,CAA9M;AACA;AAAO;AAAaO,IAAAA,IAAI,CAACH,WAAD,EAAc,EAAE,GAAGe,eAAL;AACpCL,MAAAA,GAAG,EAAEA,GAD+B;AAEpCE,MAAAA,QAAQ,EAAEb,GAAG,CAACa,QAAD,EAAWiB,KAAK,IAAI;AAC/B,cAAMR,MAAM,GAAGL,SAAS,EAAxB;AAD+B,6BAK3Ba,KAAK,CAACpB,KALqB;AAAA,cAGtBqB,QAHsB,gBAG7BnB,KAH6B;AAAA,cAInBoB,aAJmB,gBAI7BjB,QAJ6B;;AAO/B,cAAMkB,OAAO,GAAGC,CAAC,IAAIf,YAAY,CAACY,QAAD,EAAWG,CAAX,CAAjC;;AAEA;AAAO;AAAatC,UAAAA,KAAK,CAACuC,YAAN,CAAmBL,KAAnB,EAA0B;AAC5CxB,YAAAA,IAD4C;AAE5CQ,YAAAA,IAAI,EAAEgB,KAAK,CAAChB,IAAN,IAAcA,IAFwB;AAG5CsB,YAAAA,OAAO,EAAEd,MAAM,CAACE,OAAP,CAAeO,QAAf,MAA6B,CAAC,CAHK;AAI5ChB,YAAAA,QAAQ,EAAEhB,aAAa,CAACiC,aAAD,EAAgBC,OAAhB;AAJqB,WAA1B;AAApB;AAMD,OAfY;AAFuB,KAAd;AAAxB;AAmBD,CAtDsC,CAAvC;AAuDAzB,iBAAiB,CAACH,YAAlB,GAAiCA,YAAjC;AACA,eAAegC,MAAM,CAACC,MAAP,CAAc9B,iBAAd,EAAiC;AAC9C+B,EAAAA,MAAM,EAAErC;AADsC,CAAjC,CAAf","sourcesContent":["import * as React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  type: 'radio',\n  vertical: false\n};\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    children,\n    type,\n    name,\n    value,\n    onChange,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    value: 'onChange'\n  });\n\n  const getValues = () => value == null ? [] : [].concat(value);\n\n  const handleToggle = (inputVal, event) => {\n    if (!onChange) {\n      return;\n    }\n\n    const values = getValues();\n    const isActive = values.indexOf(inputVal) !== -1;\n\n    if (type === 'radio') {\n      if (!isActive && onChange) onChange(inputVal, event);\n      return;\n    }\n\n    if (isActive) {\n      onChange(values.filter(n => n !== inputVal), event);\n    } else {\n      onChange([...values, inputVal], event);\n    }\n  };\n\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return /*#__PURE__*/_jsx(ButtonGroup, { ...controlledProps,\n    ref: ref,\n    children: map(children, child => {\n      const values = getValues();\n      const {\n        value: childVal,\n        onChange: childOnChange\n      } = child.props;\n\n      const handler = e => handleToggle(childVal, e);\n\n      return /*#__PURE__*/React.cloneElement(child, {\n        type,\n        name: child.name || name,\n        checked: values.indexOf(childVal) !== -1,\n        onChange: chainFunction(childOnChange, handler)\n      });\n    })\n  });\n});\nToggleButtonGroup.defaultProps = defaultProps;\nexport default Object.assign(ToggleButtonGroup, {\n  Button: ToggleButton\n});"]},"metadata":{},"sourceType":"module"}