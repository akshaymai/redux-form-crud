{"ast":null,"code":"import jsonplaceholder from \"../apis/jsonplaceholder\";\nimport _ from \"lodash\";\nexport const FetchPostAndUser = () => async (dispatch, getState) => {\n  await dispatch(FetchPost());\n\n  const UserIDs = _.uniq(_.map(getState().posts, \"userId\"));\n\n  UserIDs.forEach(item => dispatch(FetchUsers(item)));\n};\nexport const FetchPost = () => async (dispatch, getState) => {\n  const response = await jsonplaceholder.get(\"/posts\");\n  dispatch({\n    type: \"FETCH_POSTS\",\n    payload: response.data\n  });\n};\nexport const FetchUsers = id => async (dispatch, getState) => {\n  const response = await jsonplaceholder.get(`/users/${id}`);\n  dispatch({\n    type: \"FETCH_USERS\",\n    payload: response.data\n  });\n}; // export const FetchUsers = (id) => (dispatch) => {\n//   memolizeFun(id, dispatch);\n// };\n// const memolizeFun = _.memoize(async (id, dispatch) => {\n//   const response = await jsonplaceholder.get(`/users/${id}`);\n//   dispatch({ type: \"FETCH_USERS\", payload: response.data });\n// });\n// export const FetchUsers = (id) => (dispatch) => memolizeFun(id, dispatch);\n// const memolizeFun = _.memoize(async (id, dispatch) => {\n//   const response = await jsonplaceholder.get(`/users/${id}`);\n//   dispatch({ type: \"FETCH_USERS\", payload: response.data });\n// });","map":{"version":3,"sources":["/home/mitu/reduxasync/src/actions/index.js"],"names":["jsonplaceholder","_","FetchPostAndUser","dispatch","getState","FetchPost","UserIDs","uniq","map","posts","forEach","item","FetchUsers","response","get","type","payload","data","id"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,yBAA5B;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAClE,QAAMD,QAAQ,CAACE,SAAS,EAAV,CAAd;;AACA,QAAMC,OAAO,GAAGL,CAAC,CAACM,IAAF,CAAON,CAAC,CAACO,GAAF,CAAMJ,QAAQ,GAAGK,KAAjB,EAAwB,QAAxB,CAAP,CAAhB;;AACAH,EAAAA,OAAO,CAACI,OAAR,CAAiBC,IAAD,IAAUR,QAAQ,CAACS,UAAU,CAACD,IAAD,CAAX,CAAlC;AACD,CAJM;AAMP,OAAO,MAAMN,SAAS,GAAG,MAAM,OAAOF,QAAP,EAAiBC,QAAjB,KAA8B;AAC3D,QAAMS,QAAQ,GAAG,MAAMb,eAAe,CAACc,GAAhB,CAAoB,QAApB,CAAvB;AACAX,EAAAA,QAAQ,CAAC;AAAEY,IAAAA,IAAI,EAAE,aAAR;AAAuBC,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAzC,GAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAML,UAAU,GAAIM,EAAD,IAAQ,OAAOf,QAAP,EAAiBC,QAAjB,KAA8B;AAC9D,QAAMS,QAAQ,GAAG,MAAMb,eAAe,CAACc,GAAhB,CAAqB,UAASI,EAAG,EAAjC,CAAvB;AACAf,EAAAA,QAAQ,CAAC;AAAEY,IAAAA,IAAI,EAAE,aAAR;AAAuBC,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAzC,GAAD,CAAR;AACD,CAHM,C,CAKP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import jsonplaceholder from \"../apis/jsonplaceholder\";\nimport _ from \"lodash\";\n\nexport const FetchPostAndUser = () => async (dispatch, getState) => {\n  await dispatch(FetchPost());\n  const UserIDs = _.uniq(_.map(getState().posts, \"userId\"));\n  UserIDs.forEach((item) => dispatch(FetchUsers(item)));\n};\n\nexport const FetchPost = () => async (dispatch, getState) => {\n  const response = await jsonplaceholder.get(\"/posts\");\n  dispatch({ type: \"FETCH_POSTS\", payload: response.data });\n};\n\nexport const FetchUsers = (id) => async (dispatch, getState) => {\n  const response = await jsonplaceholder.get(`/users/${id}`);\n  dispatch({ type: \"FETCH_USERS\", payload: response.data });\n};\n\n// export const FetchUsers = (id) => (dispatch) => {\n//   memolizeFun(id, dispatch);\n// };\n\n// const memolizeFun = _.memoize(async (id, dispatch) => {\n//   const response = await jsonplaceholder.get(`/users/${id}`);\n//   dispatch({ type: \"FETCH_USERS\", payload: response.data });\n// });\n// export const FetchUsers = (id) => (dispatch) => memolizeFun(id, dispatch);\n// const memolizeFun = _.memoize(async (id, dispatch) => {\n//   const response = await jsonplaceholder.get(`/users/${id}`);\n//   dispatch({ type: \"FETCH_USERS\", payload: response.data });\n// });\n"]},"metadata":{},"sourceType":"module"}