{"ast":null,"code":"var _jsxFileName = \"/home/mitu/reduxasync/striming/src/components/editStrems.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { connect } from \"react-redux\";\nimport { createStrems, fetchStrmes } from \"../actions\";\n\nclass EditStream extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fromSubmit = item => {\n      this.props.createStrems(item);\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchStrmes(this.props.match.params.id);\n  }\n\n  renderInput({\n    input,\n    lable,\n    type,\n    placeholder,\n    meta: {\n      touched,\n      error,\n      warning\n    }\n  }) {\n    return React.createElement(React.Fragment, null, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, lable), React.createElement(\"input\", Object.assign({}, input, {\n      // type={type}\n      // placeholder={placeholder}\n      autoComplete: \"off\",\n      className: error && touched ? \"sdf me\" : \"sdf\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    })), touched && error && React.createElement(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, error), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }));\n  }\n\n  render() {\n    console.log(\"asdfghjk\", this.state);\n    return React.createElement(\"div\", {\n      className: \"auth-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"auth-inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.fromSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Field // type=\"text\"\n    // ini\n    // value={this.props.strmes.title}\n    // placeholder=\"enter title\"\n    , {\n      name: \"title\",\n      component: this.renderInput,\n      lable: \"Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(Field // value={this.props.strmes.discription}\n    // type=\"text\"\n    , {\n      name: \"discription\" // placeholder=\"enter discription\"\n      ,\n      component: this.renderInput,\n      lable: \"Discription\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nconst validate = values => {\n  const errors = {};\n\n  if (!values.title) {\n    errors.title = \"Required\";\n  } else if (values.title.length > 25) {\n    errors.title = \"Must be 15 characters or less\";\n  }\n\n  if (!values.discription) {\n    errors.discription = \"Required\";\n  } else if (values.discription.length > 25) {\n    errors.discription = \"Must be 15 characters or less\";\n  }\n\n  return errors;\n};\n\nconst formWrape = reduxForm({\n  form: \"createStreame\",\n  initialValues: {\n    title: \"sdfb\",\n    discription: \"sdfvb\"\n  },\n  validate: validate\n})(EditStream);\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    strmes: state.strmes[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  createStrems,\n  fetchStrmes\n})(formWrape);","map":{"version":3,"sources":["/home/mitu/reduxasync/striming/src/components/editStrems.js"],"names":["React","Field","reduxForm","connect","createStrems","fetchStrmes","EditStream","Component","fromSubmit","item","props","componentDidMount","match","params","id","renderInput","input","lable","type","placeholder","meta","touched","error","warning","color","render","console","log","state","handleSubmit","validate","values","errors","title","length","discription","formWrape","form","initialValues","mapStateToProps","ownProps","strmes"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { connect } from \"react-redux\";\nimport { createStrems, fetchStrmes } from \"../actions\";\nclass EditStream extends React.Component {\n  componentDidMount() {\n    this.props.fetchStrmes(this.props.match.params.id);\n  }\n  renderInput({\n    input,\n    lable,\n    type,\n    placeholder,\n    meta: { touched, error, warning },\n  }) {\n    return (\n      <>\n        <label>{lable}</label>\n        {/* <input {...input} autoComplete=\"off\" /> */}\n\n        <input\n          {...input}\n          // type={type}\n          // placeholder={placeholder}\n          autoComplete=\"off\"\n          className={error && touched ? \"sdf me\" : \"sdf\"}\n        />\n        {touched && error && <span style={{ color: \"red\" }}>{error}</span>}\n        <br />\n      </>\n    );\n  }\n\n  fromSubmit = (item) => {\n    this.props.createStrems(item);\n  };\n\n  render() {\n    console.log(\"asdfghjk\", this.state);\n    return (\n      <div className=\"auth-wrapper\">\n        <div className=\"auth-inner\">\n          <form onSubmit={this.props.handleSubmit(this.fromSubmit)}>\n            <Field\n              // type=\"text\"\n              // ini\n              // value={this.props.strmes.title}\n              // placeholder=\"enter title\"\n              name=\"title\"\n              component={this.renderInput}\n              lable=\"Title\"\n            />\n            <Field\n              // value={this.props.strmes.discription}\n              // type=\"text\"\n              name=\"discription\"\n              // placeholder=\"enter discription\"\n              component={this.renderInput}\n              lable=\"Discription\"\n            />\n\n            <button type=\"submit\">Submit</button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\nconst validate = (values) => {\n  const errors = {};\n  if (!values.title) {\n    errors.title = \"Required\";\n  } else if (values.title.length > 25) {\n    errors.title = \"Must be 15 characters or less\";\n  }\n\n  if (!values.discription) {\n    errors.discription = \"Required\";\n  } else if (values.discription.length > 25) {\n    errors.discription = \"Must be 15 characters or less\";\n  }\n  return errors;\n};\n\nconst formWrape = reduxForm({\n  form: \"createStreame\",\n  initialValues: { title: \"sdfb\", discription: \"sdfvb\" },\n  validate: validate,\n})(EditStream);\n\nconst mapStateToProps = (state, ownProps) => {\n  return { strmes: state.strmes[ownProps.match.params.id] };\n};\nexport default connect(mapStateToProps, { createStrems, fetchStrmes })(\n  formWrape\n);\n"]},"metadata":{},"sourceType":"module"}